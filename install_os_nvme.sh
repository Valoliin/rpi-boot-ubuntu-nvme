#!/bin/bash
if [ "$EUID" -ne 0 ]; then
  echo "‚ùå Ce script doit √™tre ex√©cut√© avec les droits root (sudo)."
  exit 1
fi

set -e

echo "=== Script de configuration du Raspberry Pi 5 pour booter sur NVMe ==="

# D√©tection du disque NVMe
NVME_DEV=$(lsblk -d -o NAME,MODEL | grep -i nvme | awk '{print $1}')
if [ -z "$NVME_DEV" ]; then
  echo "‚ùå Aucun disque NVMe d√©tect√©. V√©rifie ton HAT ou ton c√¢blage."
  exit 1
fi

DISK="/dev/$NVME_DEV"
# V√©rification de la capacit√© d√©tect√©e du disque
NVME_SIZE=$(lsblk -b -dn -o SIZE "/dev/$NVME_DEV")

if [ "$NVME_SIZE" -eq 0 ]; then
  echo "‚ùå Le SSD NVMe est d√©tect√©, mais sa capacit√© est de 0 octet."
  echo "Cela signifie qu'il est mal initialis√© ou mal aliment√©."
  echo "üëâ Consulte la section d√©pannage du README √† l'adresse suivante :"
  echo "   https://github.com/Valoliin/rpi-boot-ubuntu-nvme#-d√©pannage"
  exit 1
fi

echo "‚úÖ Disque NVMe d√©tect√© : $DISK"

# Choix de l'image
echo "Choisis l'OS √† installer sur le SSD NVMe :"
echo "1. Ubuntu MATE 22.04.5 LTS (robot version 2025)"
echo "2. Ubuntu 24.04.2 Server LTS (robot version 2026)"
echo "3. Autre image personnalis√©e (URL ou chemin local)"
read -p "Ton choix (1, 2 ou 3) : " choix

case $choix in
  1)
    OS_NAME="Ubuntu MATE 22.04.5 LTS (robot version 2025)"
    IMG_URL="https://releases.ubuntu-mate.org/22.04/arm64/ubuntu-mate-22.04-desktop-arm64+raspi.img.xz"
    FILE_NAME=$(basename "$IMG_URL")
    TMP_IMG="/tmp/$FILE_NAME"
    ;;
  2)
    OS_NAME="Ubuntu 24.04.2 Server LTS (robot version 2026)"
    IMG_URL="https://cdimage.ubuntu.com/releases/24.04.2/release/ubuntu-24.04.2-preinstalled-server-arm64+raspi.img.xz"
    FILE_NAME=$(basename "$IMG_URL")
    TMP_IMG="/tmp/$FILE_NAME"
    ;;
  3)
    read -p "Entre l'URL de l'image (.img ou .img.xz) ou son chemin local : " IMG_SOURCE
    if [[ "$IMG_SOURCE" =~ ^http ]]; then
      FILE_NAME=$(basename "$IMG_SOURCE")
      TMP_IMG="/tmp/$FILE_NAME"
      if [[ -f "$TMP_IMG" ]]; then
        echo "‚úÖ Image d√©j√† t√©l√©charg√©e dans /tmp : $FILE_NAME"
      else
        echo "üì• T√©l√©chargement de l'image personnalis√©e..."
        wget -O "$TMP_IMG" "$IMG_SOURCE"
      fi
    elif [[ -f "$IMG_SOURCE" ]]; then
      echo "‚úÖ Fichier local d√©tect√© : $IMG_SOURCE"
      TMP_IMG="$IMG_SOURCE"
    else
      echo "‚ùå Lien ou chemin invalide. Arr√™t."
      exit 1
    fi
    OS_NAME="Image personnalis√©e"
    ;;
  *)
    echo "‚ùå Choix invalide. Arr√™t du script."
    exit 1
    ;;
esac

# T√©l√©chargement si n√©cessaire pour 1 et 2
if [[ "$choix" == "1" || "$choix" == "2" ]]; then
  if [[ -f "$TMP_IMG" ]]; then
    echo "‚úÖ Image d√©j√† pr√©sente : $TMP_IMG"
  else
    echo "üì• T√©l√©chargement de $OS_NAME..."
    wget -O "$TMP_IMG" "$IMG_URL"
  fi
fi

# D√©compression si .xz
if [[ "$TMP_IMG" == *.xz ]]; then
  echo "üì¶ D√©compression de l'image..."
  unxz -f "$TMP_IMG"
  TMP_IMG="${TMP_IMG%.xz}"
fi

# Confirmation
echo "‚ö†Ô∏è ATTENTION : le SSD $DISK va √™tre enti√®rement effac√©."
read -p "Es-tu s√ªr de vouloir continuer ? (oui/non) : " confirm
if [ "$confirm" != "oui" ]; then
  echo "‚ùå Annul√©."
  exit 1
fi

# Flash
echo "üíæ Flash de $OS_NAME sur le SSD..."
dd if="$TMP_IMG" of="$DISK" bs=4M status=progress conv=fsync

echo "‚úÖ Flash termin√©. Synchronisation..."
sync

echo "‚úÖ Le Raspberry Pi est maintenant pr√™t √† booter sur le SSD NVMe."
echo "‚èèÔ∏è Tu peux maintenant √©teindre le Raspberry Pi, retirer la carte SD et red√©marrer sur le SSD."
